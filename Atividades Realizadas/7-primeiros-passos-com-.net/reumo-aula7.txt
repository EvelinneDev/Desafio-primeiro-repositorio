Iniciando com .NET

Executando dotnet --help

Execute um comando do SDK do .NET.

sdk-options:
  -d|--diagnostics  Habilitar saída de diagnóstico.
  -h|--help         Mostrar a ajuda da linha de comando.
  --info            Exiba informaçoes do .NET.
  --list-runtimes   Exiba os runtimes instalados.
  --list-sdks       Exiba os SDKs instalados.
  --version         Exiba a versao do SDK do .NET em uso.

Comandos do SDK:
  add               Adicionar um pacote ou uma referência a um projeto do .NET.
  build             Criar um projeto do .NET.
  build-server      Interagir com servidores iniciados por um build.
  clean             Limpar as saídas do build de um projeto do .NET.
  format            Aplicar preferências de estilo a um projeto ou soluçao.
  help              Mostrar a ajuda da linha de comando.
  list              Listar as referências de um projeto do .NET.
  msbuild           Executar comandos do MSBuild (Microsoft Build Engine).
  new               Criar um novo projeto ou arquivo do .NET.
  nuget             Fornece comandos adicionais do NuGet.
  pack              Criar um pacote do NuGet.
  publish           Publicar um projeto do .NET para implantaçao.
  remove            Remover um pacote ou uma referência de um projeto do .NET.
  restore           Restaurar as dependências especificadas em um projeto do .NET.
  run               Criar e executar uma saída de projeto do .NET.
  sdk               Gerencie a instalaçao do SDK do .NET.
  sln               Modificar os arquivos da soluçao do Visual Studio.
  store             Armazenar os assemblies especificados no repositório de pacotes do runtime.
  test              Executar testes de unidade usando o executor de testes especificado em um projeto do .NET.
  tool              Instalar ou gerenciar ferramentas que ampliam a experiência do .NET.
  vstest            Executar comandos do VSTest (Microsoft Test Engine).
  workload          Gerenciar as cargas de trabalho opcionais.

Comandos adicionais de ferramentas em pacote:
  dev-certs         Crie e gerencie certificados de desenvolvimento.
  fsi               Iniciar F# Interativo / executar scripts do F#.
  sql-cache         Ferramentas de linha de comando do cache do SQL Server.
  user-secrets      Gerencie segredos do usuário de desenvolvimento.
  watch             Inicie um observador de arquivo que executa um comando quando os arquivos sao alterados.

Execute 'dotnet [command] --help' para obter mais informaçoes sobre um comando.

Executando um novo projeto:
-No prompt de comando do Windows digitar:
	dotnet new console - nomedoprojeto
-é criada uma pasta com a estrutura do prjeto dentro
-explorer . (abre a pasta com os arquivos criados)
-code . (abre o conteúdo da pasta pra dentro do visualcode)
- dotnet restore (restaura os pacotes, baixa)
- dotnet build (tbm restaura os pacotes e pega todo o código fonte e faz o processo de compilação e gerar os binários)
- cd .. (sobe um nível de pasta)

Conhecendo o C#

-C# é uma linguagem elegante, orientada a objeto e fortemente tipada.
- A sintaxe do C# é similar a do C, C++ ou Java
- Suporta os conceitos de encapsulamento, herança e polimorfismo (OO)
-Os programas C# são executados no .NET, que inclui:
	-CLR(common language runtime)
	-Conjunto unificado de bibliotecas de classes
-Atualmente o compilador do C# é o Roslyn

Como funciona?

- O código-fonte escrito em C# é compilado em uma linguagem intermediária(IL)
- O código e os recursos de IL são armazenados no disco em um arquivo executável chamado assembly, geralmente com uma extensão .exe ou .dll.
- Quando o programa C# é executado, o assembly é carregado no CLR
- Em seguida o CLR executará a compilação just in time(JIT) para converter o código IL em instruções de máquinas nativas.

- O CLR também fornece outros serviços:
	-Garbage Collector
	-Exception Handler
	-Resources Manager
-Além dos serviços de tempo de execução, o .NET também inclui uma extensa biblioteca com milhares de classes que fornecem uma ampla variedade de funcionalidades úteis, desde entrada e saída de arquivos, manipulação de cadeias de caracteres, análise XML, etc.

Estrutura de programa

- Os principais conceitos organizacionais em C# são:
	-programas
	-namespaces
	-tipos
	-membros
	-assemblies

-Programs C# consistem em um ou mais arquivos
-Os programs declaram tipos, que contêm membros e podem ser organizados em namespaces.
-Classes e intefaces são exemplos de tipos
-Campos, métodos, propriedades e eventos são exemplos de membros.
-Quando os programas C# são compilados, eles são fisicamente empacotados em assemblies
-Os assemblies geralmente têm a extensão de arquivo .exe ou .dll, dependendo se são aplicações ou bibliotecas.

Conhecendoo C#
parte 02

Tipos de valor

-Variáreis de tipo de valor contêm diretamente seus dados
-As variáveis têm sua própria cópia dos dados e não é possível que as operações afetem outra variável
(exceto no caso das variáveis de parâmetro ref e out)

-Numéricos: sbyte, short, int, long, byte, ushort, uint, ulong.
-Caracteres Unicode: char
-Pontos flutuantes: float, double, decimal
-Booleano: bool

-Enum, struct, tipos nullable (exemplo int?)
-Variáveis de tipos de referência armazenam referências a seus dados
-É possível que duas variáveis façam referência ao mesmo objeto e, portanto,
 que operações em uma variável afetem o objeto referenciado pela outra variável.

-Tipos de classe: class, object, string
-Tipos Arrays: int[], int[,], etc...
-Interface, delegate.

Instruções

-Ações de um programa são expressas usando instruções

{
	Um bloco permite que várias instruções sejam escritas em contextos
}


São:
-Declarações de variáveis e constantes locais
-if
-switch
-while
-do
-for
-foreach

-break
-continue
-return
-throw
-try .. catch .. finally
-using


Array

-É uma estrutura de dados que contém um número X de elementos,
 todos do mesmo tipo, que são acessados através de índices computados.
-Arrays são tipos de referência e a declaração de uma variável array
 simplesmente reserva espaço para uma referência de uma instância de array.
-Ao criar uma array é especificado o tamanho da nova instância,
 que é fixo durante o tempo de vida da instância.
-Os índices dos elementos de um array variam de 0 a comprimento do array - 1.


Classes e Objetos

-Classes são os tipos mais fundamentais de C#
-Uma classe é uma estrutura de dados que combina estado(campos) e ações (métodos)

-Objetos são instâncias de uma classe

-As classes suportam herança e poliformismo, mecanismos pelos quais
 as classes derivadas podem estender e especializar as classes base.

-Instâncias de classes (objetos) são criadas usando o operador new,
 que aloca a memória para uma nova instância, chama um construtor para
 iniciar a instância e retorna uma referência à instância.
	
	Ponto p1 = new Ponto(0,0);
	Ponto p2 = new Ponto(10,20);

-A memória ocupada por um objeto é recuperada automaticamente quando o objeto
 não está mais acessível. Não é necessário nem possível desalocar explicitamente objetos em C#.

Membros

-Os membros de uma classe podem ser estáticos ou membros da instância
-Membros estáticos pertencem a classe e membros de instância pertencem ao objeto
-Constantes, variáveis, métodos, propriedades, construtores, etc...

Acessibilidade

-Cada membro de uma classe tem uma acessibilidade associada, que controla as regiões
 do texto do programa que podem acessar o membro.
-Podem ser:
	-Public (qualquer parte do código pode acessá-lo, qualquer membro)
	-protected (apenas as classes que herdam da classe base têm acesso a este método)
	-internal (só é acessado de dentro do assembly que ele faz parte)
	-private (acessado dentro da classe que está contido)

Herança

-Uma declaração de classe pode especificar uma classe base,
 herdando os membros public, internal e protected da classe base.
-Omitir uma especificação de classe base é o mesmo que derivar do tipo object.

Métodos

-Um método é um membro que implementa uma computação ou ação que
 pode ser executada por um objeto ou classe.
-Os métodos podem ter uma lista de parâmetros, que representam
 valores ou referências de variáveis passados para método,
 e um tipo de retorno, que especifica o tipo do valor caulculado
 e retornado pelo método.


Structs

-Como as classes, as structs são estruturas de dados que podem 
conter membros de dados e membros de ação, mas, diferentemente das classes,
 as structs são tipos de valor e não requerem alocação de heap.

-Uma variável de um tipo de struct armazena diretamente os dados da estrutura,
 enquanto uma variável de um tipo de classe armazena uma referência a um objeto alocado na memória.

-Strucs não aceitam herança determinada pelo desenvolvedor.

-São úteis para pequenas estruturas de dados que possuem
 semântica de valor: Números complexos, pontos em um sistema
 de coodenadas ou pares de chave-valor em um dicionário são bons exemplos de utilização.

-O uso de structs em vez de classes para pequenas estruturas
 de dados pode fazer uma grande diferença no número de alocações de memória.

-Construtores de structs são chamados com o operador new,
 semelhante a um construtor de classe, mas em vez de alocar dinamicamente um
 objeto no heap gerenciado e retornar uma referência a ele, um construtor struct
 simplismente retorna o próprio valor struct (normalmente em um local temporário na stack),
 e esse valor é copiado conforme necessário.

-link para artigos:
https://www.eximiaco.tech/pt/category/fundamentos

Interfaces

-Uma interface define um contrato que pode ser implementado por classes e structs.
-Uma interface pode conter métodos, propriedades, eventos e indexadores.
-Uma interface não fornece implementações dos membros que define - apenas suas "assinaturas".
-As interfaces podem empregar herança múltipla.

Enums

-É um tipo de valor distinto com um conjunto de constantes nomeadas
-Você define enumerações quando precisa definir um tipo que pode
 ter um conjunto de valores discretos.
-Eles usam um dos tipos de valor integral como armazenamento subjacente.
 Eles fornecem significado semântico aos valores discretos.
-Cada tipo de enum possui um tipo integral correspondente chamado tipo subjacente do tipo de enum.
-Um tipo de enumeração que não declara explicitamente um tipo subjacente tem um tipo subjacente int.


Links:
-
Download.NET:
https://dotnet.microsoft.com/download

Documentação do .NET:
https://docs.microsoft.com/pt-br/dotnet/

.NET Foundation:
https://dotnetfoundation.org/

















