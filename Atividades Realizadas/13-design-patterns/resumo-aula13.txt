Introdução a Design Patterns com .NET


Design Patterns/ Padrões de Projeto

-"Alguém já resolveu o seu problema!"

-São soluções elegantes, testadas e aprovadas para problemas recorrentes que 
temos no desing e implementação de software.

-Surgiram da experimentação e repetição

-Não é um padrão pronto para ser aplicado no seu código, é uma descrição/template
de como resolver o seu problema nas mais diferentes situações.

-São apenas sugestões de software que podem ser aplicadas a qualquer linguagem de 
programação.

-Com o Design Pattern você terá vários benefícios dentre eles são: código mais enxuto,
 limpo, organizado, aumentar a qualidade e diminuir a complexidade do seu código.


GOF - Gang of Four

-Criaram a bíblia sobre o assunto.
-Em 1995 um grupo de pessoas, mas especificamente quatro pessoas escreveram um livro
 iniciando os Design Patterns mais conhecido de mercado.
-São eles Erich Gamma, Richard Helm, Ralph Johnson e John Vlissides.

-Catalogaram 23 patterns divididos em 3 grupos:

-De criação
 Creational Pattern(construção do objeto e referência; Visam abstrair o processo
 de como objetos são criados na aplicação)

-Estrutural
 Structural Pattern(relaçãoentre os objetos/ inetração entre si; lidam com a composição
 de classes e objetos)

-Comportamental
 Behavioral Pattern (comunicação entre os objetos, responsabilidades, algoritmos;
 que caracterizam como as classes e objeots interagem e distribuem responsabilidades
 na aplicação).

os 23 padrões:

		Criação			Estrutural		Comportamental
--------------------------------------------------------------------------------
Classe		Factory Method		Adapter			Interpreter
								Template Method
--------------------------------------------------------------------------------
Objeto		Abstract Factory	Bridge			Chain of Responsability
		Builder			Composite		Command
		Prototype		Decorator		Iterator
		Singleton		Facade			Mediator
					Flyweight		Memento
					Proxy			Observer
								State
								Strategy
								Visitor


Benefícios

-Não precisa reinventar a roda
-Padrões universais facilitam o entendimento do seu projeto
-Eveita a refatoração desnecessária
-Ajuda na reutilização de código (conceito Dry - Don't repeat yourself)
-Abstrai e nomeia partes particulares do projeto
-Ajuda na aplicação dos princópios de design orientado a objetos (SOLID)
-Facilitam a criação de testes unitários.

Desvantagens

-Alguns padrões podem ser complexos até que você os compreenda
-Muito código para atingir um objetivo simples
-Podem trazer otimizações prematuras para o seu código (YAGNI - You ain't gonna need it)
-Se usados incorretamente, podem atrapalhar ao invés de ajudar.

Princípios do desing orientado a objetos

-Single Responsibility Principle (Princípio da responsabilidade única) - Uma classe
deve ter apenas um motivo para mudar.

-Open/closed principle(Princípio do aberto/fechado) - Classes ou objetos e métodos
devem estar abertos para extensão, mas fechados para modificações.

-Liskov substitution principle (princípio da susbtituição de Liskov) - Classes derivadas
devem ser capazes de substituir totalmente classes-bases.

-Interface segregation principle (Princípio da segregação de interface) - Os clientes não
devem ser forçados a depender de interfaces que não utilizam.

-Dependency inversion principle (Princípio da inversão de dependência) - Módulos de
alto nível não devem ser dependentes dos módulos de baixo nível; ambos devem depender de
abstrações. Detalhes devem depender das abstrações, não o inverso.



Entity Framework Core ?

Dicas:

-Você não precisa saber todos.
-É bom conhecer bem os mais usados
-Os menos usados, basta saber a proposta dele e conseguir discutir sobre.
-Se pecisar implementar basta revisar a literatura.


Os mais usados:

Adapter

-O padrão Adapter converte a interface de uma classe para outra interface que o cliente
 espera encontrar, "traduzindo" solicitações do formato requerido pelo usuário para o
 formato compatível com o a classe adaptee e as redirecionando.

-Dessa forma, o Adaptador permite que classes com interfaces incompatíveis trabalhem juntas.

Factory

-O Factory Method é um padrão criacional de projeto que fornece uma interface para criar 
objetos em uma superclasse, mas permite que as subclasses alterem o tipo de objetos que
serão criados.

Observer

-O Observer é um padrão de projeto de software que define uma dependência um-para-muitos
entre objetos de modo que quando um objeto muda o estado, todos seus dependentes são 
notificados e atualizados automaticamente.

-Permite que objetos interessados sejam avisados da mudança de estado ou outros eventos
ocorrendo num outro objeto.

Strategy

-Strategy é um padrão de projeto de software (do inglês design pattern), pode ser
 chamado de policy. 

-Um padrão comportamental de desenvolvimento de software.  De modo que delega as 
responsabilidades adquiridas pelas entidades, atribuindo, portanto, o comportamento.
 
-Assim a comunicação entre os objetos é aprimorada, pois há a distribuição das 
responsabilidades.

Builder

-Builder é um padrão de projeto de software criacional que permite a separação da 
construção de um objeto complexo da sua representação, de forma que o mesmo processo
de construção possa criar diferentes representações.

State

-State é um padrão de projeto de software usado quando o comportamento de um objeto muda,
 dependendo do seu estado.

-Quando o contexto em que está a desenvolver requer um objeto que possua comportamentos
diferentes dependendo de qual estado se encontra, é difícil manejar a mudança de 
comportamento e os estados desse objeto, tudo dentro do mesmo bloco de código. 
O padrão State propõe uma solução para esta complicação, criando basicamente, 
um objeto para cada estado possível do objeto que o chama.

Singleton

-Garante uma única instância da classe e um acesso global para ela, ou seja, centraliza
e compartilha recursos.

-O Singleton é um padrão de projeto criacional, que garante que apenas um objeto desse 
tipo exista e forneça um único ponto de acesso a ele para qualquer outro código.

-Singleton especifica que apenas uma instância da classe pode existir, e esta será 
utilizada por toda a aplicação. Dessa forma temos apenas um ponto de acesso central
a esta instância da classe.

-Ao utilizar Singleton temos mais controle sobre o acesso às propriedades e métodos
de uma classe, e também reduzimos o consumo de memória desnecessário por utilizar
várias instancias desnecessárias de uma classe.

Repository

-Faz a abstração ("meio de campo") entre o seu domínio e sua camada de dados, ou seja,
contribui para o isolamento da camada de acesso a dados.


Facade

-Define uma interface que abstrai a complexidade de interface de subsistemas, ou seja, 
simplifica a utilização de subsistemas complexos.


Swagger

-O Swagger é um framework composto por diversas ferramentas que, independente da linguagem,
 auxilia a descrição, consumo e visualização de serviços de uma API REST. 
O Swagger permite criar a documentação da API de 3 formas:

1- Automaticamente: Simultaneamente ao desenvolvimento da API é gerada a documentação.

2- Manualmente: Permite ao desenvolvedor escrever livremente as especificações da API
 e as publicar posteriormente em seu próprio servidor.

3- Codegen: Converte todas as anotações contidas no código fonte das APIs REST em 
documentação.











